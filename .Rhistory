test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart\
H0_list <- c()
N_list <- c(50, 100, 200, 500, 1000)
for (N in N_list){
z_iter = c()
lmao = c()
for (epoch in 1:400)
{
RNGkind(sample.kind = "Rounding")
prob = c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
data <- cbind(table(x)/N,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
count = c(sum(x==1), sum(x==2), sum(x==3), sum(x==4), sum(x==5), sum(x==6))
dim(count) <- c(3,2)
test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart\
eps <- 1/10
H0_list <- c()
N_list <- c(50, 100, 200, 500, 1000)
for (N in N_list){
z_iter = c()
lmao = c()
for (epoch in 1:400)
{
RNGkind(sample.kind = "Rounding")
prob = c(1/6 - eps, 1/6, 1/6 + eps, 1/6 + eps, 1/6, 1/6 - eps)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
data <- cbind(table(x)/N,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
count = c(sum(x==1), sum(x==2), sum(x==3), sum(x==4), sum(x==5), sum(x==6))
dim(count) <- c(3,2)
test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
print(H0_list)
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart\
eps <- 1/3
H0_list <- c()
N_list <- c(50, 100, 200, 500, 1000)
for (N in N_list){
z_iter = c()
lmao = c()
for (epoch in 1:400)
{
RNGkind(sample.kind = "Rounding")
prob = c(1/6 - eps, 1/6, 1/6 + eps, 1/6 + eps, 1/6, 1/6 - eps)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
data <- cbind(table(x)/N,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
count = c(sum(x==1), sum(x==2), sum(x==3), sum(x==4), sum(x==5), sum(x==6))
dim(count) <- c(3,2)
test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart\
eps <- 1/8
H0_list <- c()
N_list <- c(50, 100, 200, 500, 1000)
for (N in N_list){
z_iter = c()
lmao = c()
for (epoch in 1:400)
{
RNGkind(sample.kind = "Rounding")
prob = c(1/6 - eps, 1/6, 1/6 + eps, 1/6 + eps, 1/6, 1/6 - eps)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
data <- cbind(table(x)/N,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
count = c(sum(x==1), sum(x==2), sum(x==3), sum(x==4), sum(x==5), sum(x==6))
dim(count) <- c(3,2)
test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart\
eps <- 1/100
H0_list <- c()
N_list <- c(50, 100, 200, 500, 1000)
for (N in N_list){
z_iter = c()
lmao = c()
for (epoch in 1:400)
{
RNGkind(sample.kind = "Rounding")
prob = c(1/6 - eps, 1/6, 1/6 + eps, 1/6 + eps, 1/6, 1/6 - eps)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
data <- cbind(table(x)/N,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
count = c(sum(x==1), sum(x==2), sum(x==3), sum(x==4), sum(x==5), sum(x==6))
dim(count) <- c(3,2)
test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart\
eps <- 1/(6 + 0.1)
H0_list <- c()
N_list <- c(50, 100, 200, 500, 1000)
for (N in N_list){
z_iter = c()
lmao = c()
for (epoch in 1:400)
{
RNGkind(sample.kind = "Rounding")
prob = c(1/6 - eps, 1/6, 1/6 + eps, 1/6 + eps, 1/6, 1/6 - eps)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
data <- cbind(table(x)/N,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
count = c(sum(x==1), sum(x==2), sum(x==3), sum(x==4), sum(x==5), sum(x==6))
dim(count) <- c(3,2)
test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
print(H0_list)
H1_iter <- list()
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart\
for (eps in c(1/100, 1/20, 1/7)){
H0_list <- c()
N_list <- c(50, 100, 200, 500, 1000)
for (N in N_list){
z_iter = c()
lmao = c()
for (epoch in 1:400)
{
RNGkind(sample.kind = "Rounding")
prob = c(1/6 - eps, 1/6, 1/6 + eps, 1/6 + eps, 1/6, 1/6 - eps)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
data <- cbind(table(x)/N,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
count = c(sum(x==1), sum(x==2), sum(x==3), sum(x==4), sum(x==5), sum(x==6))
dim(count) <- c(3,2)
test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
H1_iter <- append(H1_iter, H0_list)
}
print(H1_iter)
View(H1_iter)
H1_iter <- c()
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart\
for (eps in c(1/100, 1/20, 1/7)){
H0_list <- c()
N_list <- c(50, 100, 200, 500, 1000)
for (N in N_list){
z_iter = c()
lmao = c()
for (epoch in 1:400)
{
RNGkind(sample.kind = "Rounding")
prob = c(1/6 - eps, 1/6, 1/6 + eps, 1/6 + eps, 1/6, 1/6 - eps)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
data <- cbind(table(x)/N,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
count = c(sum(x==1), sum(x==2), sum(x==3), sum(x==4), sum(x==5), sum(x==6))
dim(count) <- c(3,2)
test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
H1_iter <- cbind(H1_iter, H0_list)
}
print(H1_iter)
View(H1_iter)
H1_iter <- c()
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart\
for (eps in c(1/100, 1/20, 1/7)){
H0_list <- c()
N_list <- c(50, 100, 200, 500, 1000)
for (N in N_list){
z_iter = c()
lmao = c()
for (epoch in 1:400)
{
RNGkind(sample.kind = "Rounding")
prob = c(1/6 - eps, 1/6, 1/6 + eps, 1/6 + eps, 1/6, 1/6 - eps)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
data <- cbind(table(x)/N,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
count = c(sum(x==1), sum(x==2), sum(x==3), sum(x==4), sum(x==5), sum(x==6))
dim(count) <- c(3,2)
test = chisq.test(count, p =prob)
Q <- function(occur)
{
sum = 0
count_row = rowSums(occur)
count_col = colSums(occur)
for (i in 1:nrow(occur))
{
for (j in 1:ncol(occur))
{
E = (count_row[i] * count_col[j])/N
sum = sum + ((occur[i,j] - E)^2)/E
}
}
return (sum)
}
z = Q(count)
ddl = 2
alpha = 0.05
z_iter = c(z_iter, z)
lmao = c(lmao, z <= qchisq(1 - alpha, ddl))
}
H0_list <- cbind(H0_list,table(lmao)[1]/400)
print(H0_list)
print(N)
}
H1_iter <- cbind(H1_iter, H0_list)
}
print(H1_iter)
dim(H1_iter) <- c(5,3)
print(H1_iter)
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart
RNGkind(sample.kind = "Rounding")
prob = c(1/4, 1/5, 1/6, 1/6, 1/10, 7/60)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
N = 1000 ; x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
barplot(table(x)/N, col="cyan", cex = 2, cex.axis = 1.5, cex.lab=1.5,
xlab="Valeurs de X", ylab = "Effectifs")
data <- cbind(table(x)/1000,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
barplot(data, beside = TRUE, col=c("blue", "red"),
legend.text = rownames((data)), args.legend = list(title="Comparaison des probabilités"))
print(dim(data))
View(data)
print(table(x))
# Instruction pour que tout le monde ait le m^eme al´ea de d´epart
RNGkind(sample.kind = "Rounding")
prob = c(1/4, 1/5, 1/6, 1/6, 1/10, 7/60)
P = cumsum(prob)
x = (1:length(P))[runif(1)<P][1]
N = 1000 ; x=rep(NA,N)
for(i in 1:N) x[i] = (1:length(P))[runif(1)<P][1]
barplot(table(x)/N, col="cyan", cex = 2, cex.axis = 1.5, cex.lab=1.5,
xlab="Valeurs de X", ylab = "Effectifs")
data <- cbind(table(x)/1000,prob)
data <- t(data)
rownames(data) <- c("Empirique","Théorique")
barplot(data, beside = TRUE, col=c("blue", "red"),
legend.text = rownames((data)), args.legend = list(title="Comparaison des probabilités"))
print(dim(data))
View(data)
print(table(x))
Q <- function(occur, prob)
{
return (sum(((occur - prob)^2)/prob))
}
z = Q(table(x), N*prob)
alpha = 0.05
ddl = 5
if (z <= qchisq(1 - alpha, ddl))
{
print("H0 n'est pas rejetté")
}
else
if (z <= qchisq(1 - alpha, ddl)){
print("H0 n'est pas rejetté")
} else
if (z <= qchisq(1 - alpha, ddl)){
print("H0 n'est pas rejetté")
} else
{
print("H0 est rejetté")
}
